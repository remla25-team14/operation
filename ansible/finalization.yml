- hosts: all 
  become: no
  gather_facts: no

  vars:
    metallb_namespace: "metallb-system"
    metallb_version: "v0.14.9"
    metallb_ip_range_start: "192.168.56.90"
    metallb_ip_range_end: "192.168.56.99"

    nginx_ingress_namespace: "ingress-nginx"
    nginx_ingress_helm_repo_url: "https://kubernetes.github.io/ingress-nginx"
    nginx_ingress_chart_name: "ingress-nginx"
    nginx_ingress_release_name: "nginx-ingress"
    # nginx_ingress_loadbalancer_ip: "192.168.56.90"

    dashboard_namespace: "kubernetes-dashboard"
    dashboard_helm_repo_url: "https://kubernetes.github.io/dashboard/"
    dashboard_chart_name: "kubernetes-dashboard"
    dashboard_release_name: "dashboard"

  tasks:
    - name: Create MetalLB namespace
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Namespace
          metadata:
            name: "{{ metallb_namespace }}"
      environment:
        KUBECONFIG: "/home/vagrant/.kube/config"

    - name: Apply MetalLB manifests
      kubernetes.core.k8s:
        state: present
        src: "https://raw.githubusercontent.com/metallb/metallb/{{ metallb_version }}/config/manifests/metallb-native.yaml"
      environment:
        KUBECONFIG: "/home/vagrant/.kube/config"

    - name: Wait for MetalLB controller Deployment to be ready
      kubernetes.core.k8s_info:
        api_version: apps/v1
        kind: Deployment
        name: controller
        namespace: "{{ metallb_namespace }}"
      register: metallb_controller_status
      until: "metallb_controller_status.resources | length > 0 and metallb_controller_status.resources[0].status.readyReplicas is defined and metallb_controller_status.resources[0].status.readyReplicas == metallb_controller_status.resources[0].spec.replicas"
      retries: 30
      delay: 10
      environment:
        KUBECONFIG: "/home/vagrant/.kube/config"

    - name: Wait for MetalLB speaker DaemonSet to be ready
      kubernetes.core.k8s_info:
        api_version: apps/v1
        kind: DaemonSet
        name: speaker
        namespace: "{{ metallb_namespace }}"
      register: metallb_speaker_status
      until: "metallb_speaker_status.resources | length > 0 and metallb_speaker_status.resources[0].status.numberReady is defined and metallb_speaker_status.resources[0].status.numberReady == metallb_speaker_status.resources[0].status.desiredNumberScheduled"
      retries: 30
      delay: 10
      environment:
        KUBECONFIG: "/home/vagrant/.kube/config"

    - name: Define MetalLB IPAddressPool
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: metallb.io/v1beta1
          kind: IPAddressPool
          metadata:
            name: default-pool
            namespace: "{{ metallb_namespace }}"
          spec:
            addresses:
              - "{{ metallb_ip_range_start }}-{{ metallb_ip_range_end }}"
      environment:
        KUBECONFIG: "/home/vagrant/.kube/config"

    - name: Define MetalLB L2Advertisement
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: metallb.io/v1beta1
          kind: L2Advertisement
          metadata:
            name: default-l2
            namespace: "{{ metallb_namespace }}"
          spec:
            ipAddressPools:
              - default-pool
      environment:
        KUBECONFIG: "/home/vagrant/.kube/config"

    - name: Add Nginx Ingress Helm repository
      kubernetes.core.helm_repository:
        name: ingress-nginx
        repo_url: "{{ nginx_ingress_helm_repo_url }}"
        state: present
      environment:
        KUBECONFIG: "/home/vagrant/.kube/config"

    - name: Install Nginx Ingress Controller with Helm
      kubernetes.core.helm:
        name: "{{ nginx_ingress_release_name }}"
        chart_ref: "ingress-nginx/{{ nginx_ingress_chart_name }}"
        release_namespace: "{{ nginx_ingress_namespace }}"
        create_namespace: yes
        state: present
        values:
          controller:
            service:
              # loadBalancerIP: "{{ nginx_ingress_loadbalancer_ip | default(omit) }}"
              annotations: {}
      environment:
        KUBECONFIG: "/home/vagrant/.kube/config"

    - name: Wait for Nginx Ingress controller pods to be ready
      ansible.builtin.shell: |
        kubectl wait --for=condition=ready pod \
          -l app.kubernetes.io/name=ingress-nginx,app.kubernetes.io/instance={{ nginx_ingress_release_name }},app.kubernetes.io/component=controller \
          -n {{ nginx_ingress_namespace }} --timeout=300s
      args:
        executable: /bin/bash
      changed_when: false
      environment:
        KUBECONFIG: "/home/vagrant/.kube/config"
      register: ingress_pods_wait_result
      until: ingress_pods_wait_result.rc == 0
      retries: 3
      delay: 15

    - name: Add Kubernetes Dashboard Helm repository
      kubernetes.core.helm_repository:
        name: kubernetes-dashboard
        repo_url: "{{ dashboard_helm_repo_url }}"
        state: present
      environment:
        KUBECONFIG: "/home/vagrant/.kube/config"

    - name: Install Kubernetes Dashboard with Helm
      kubernetes.core.helm:
        name: "{{ dashboard_release_name }}"
        chart_ref: "kubernetes-dashboard/{{ dashboard_chart_name }}"
        release_namespace: "{{ dashboard_namespace }}"
        create_namespace: yes
        state: present
      environment:
        KUBECONFIG: "/home/vagrant/.kube/config"
    - name: Create Role for Dashboard's default SA to perform TokenReview
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: rbac.authorization.k8s.io/v1
          kind: Role
          metadata:
            namespace: "{{ dashboard_namespace }}"
            name: dashboard-default-sa-tokenreviewer
          rules:
          - apiGroups: ["authentication.k8s.io"]
            resources: ["tokenreviews"]
            verbs: ["create"]
          - apiGroups: ["authorization.k8s.io"]
            resources: ["subjectaccessreviews"]
            verbs: ["create"]
      environment:
        KUBECONFIG: "/home/vagrant/.kube/config"

    - name: Bind Role to Dashboard's default SA
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: rbac.authorization.k8s.io/v1
          kind: RoleBinding
          metadata:
            name: dashboard-default-sa-tokenreviewer-binding
            namespace: "{{ dashboard_namespace }}"
          subjects:
          - kind: ServiceAccount
            name: default # The SA that the auth, api, web pods are using
            namespace: "{{ dashboard_namespace }}"
          roleRef:
            kind: Role
            name: dashboard-default-sa-tokenreviewer # The Role created above
            apiGroup: rbac.authorization.k8s.io
      environment:
        KUBECONFIG: "/home/vagrant/.kube/config"
      
    - name: Create Dashboard admin-user ServiceAccount
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: ServiceAccount
          metadata:
            name: admin-user
            namespace: "{{ dashboard_namespace }}"
      environment:
        KUBECONFIG: "/home/vagrant/.kube/config"

    - name: Create Dashboard admin-user ClusterRoleBinding
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: rbac.authorization.k8s.io/v1
          kind: ClusterRoleBinding
          metadata:
            name: admin-user
          roleRef:
            apiGroup: rbac.authorization.k8s.io
            kind: ClusterRole
            name: cluster-admin
          subjects:
          - kind: ServiceAccount
            name: admin-user
            namespace: "{{ dashboard_namespace }}"
      environment:
        KUBECONFIG: "/home/vagrant/.kube/config"

    - name: Create Ingress for Kubernetes Dashboard
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: networking.k8s.io/v1
          kind: Ingress
          metadata:
            name: kubernetes-dashboard-ingress
            namespace: "{{ dashboard_namespace }}"
            annotations:
              kubernetes.io/ingress.class: "nginx"
              nginx.ingress.kubernetes.io/backend-protocol: "HTTPS" # Nginx talks HTTPS to this backend
          spec:
            rules:
            - host: "dashboard.local"
              http:
                paths:
                - path: /
                  pathType: Prefix
                  backend:
                    service:
                      name: "dashboard-kong-proxy" # CORRECTED SERVICE NAME
                      port:
                        number: 443 # This service listens on 443
      environment:
        KUBECONFIG: "/home/vagrant/.kube/config"